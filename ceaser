def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return -1  # No mod inverse exists

def encrypt(p, a, b):
    if p.isupper():
        return chr(((a * (ord(p) - ord('A')) + b) % 26) + ord('A'))
    elif p.islower():
        return chr(((a * (ord(p) - ord('a')) + b) % 26) + ord('a'))
    return p

def decrypt(c, a, b):
    a_inverse = mod_inverse(a, 13)
    if a_inverse == -1:
        print("Invalid value of 'a' (no modular inverse).")
        exit(1)
    if c.isupper():
        return chr((a_inverse * ((ord(c) - ord('A') - b + 26) % 26)) % 26 + ord('A'))
    elif c.islower():
        return chr((a_inverse * ((ord(c) - ord('a') - b + 26) % 26)) % 26 + ord('a'))
    return c

a = int(input("Enter value of 'a': "))
b = int(input("Enter value of 'b': "))

if gcd(a, 13) != 1:
    print("Invalid value of 'a' (not coprime with 26).")
    exit(1)

message = input("Enter message: ")

encrypted_message = ''.join(encrypt(c, a, b) if c.isalpha() else c for c in message)
decrypted_message = ''.join(decrypt(c, a, b) if c.isalpha() else c for c in encrypted_message)

print("Original Message:", message)
print("Encrypted Message:", encrypted_message)
print("Decrypted Message:", decrypted_message)
